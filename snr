#!/usr/bin/env python3

import os
import re
import sys
import shlex
import subprocess

SEP = '/'
CHARS = rf'(?:\\.|\[.+\]|[^{SEP}])*'
PATTERN_REGEX = re.compile(rf's/({CHARS})(?:{SEP}({CHARS})(?:{SEP}(.*))?)?')
def rg_command(regex, replacement, glob, *args):
    command = ['rg', '-S']
    if regex:
        regex = re.sub(r'\\.', lambda m: SEP if m.group(0) == '\\'+SEP else m.group(0), regex)
        if regex == '$':
            command += ['-U', '-e', '\\n|$']
        else:
            command += ['-e', regex]

    if replacement is None:
        command += ['--colors', 'match:fg:red']
    else:
        replacement = re.sub(r'\\.', lambda m: SEP if m.group(0) == '\\'+SEP else m.group(0), replacement)
        replacement = replacement.encode('utf8').decode('unicode_escape')
        if regex == '$':
            replacement += '${0}'
        command += ['-r', replacement]
        command += ['--colors', 'match:fg:green']

    if glob:
        negate = ''
        if glob.startswith('!'):
            negate = '!'
            glob = glob[1:]
        command += ['--iglob', f'{negate}*{glob}*', '--iglob', f'{negate}**/*{glob}*/**']

    return command + list(args)

def shell_quote(*args):
    return ' '.join(map(shlex.quote, args))

def main():
    import argparse
    parser = argparse.ArgumentParser()
    parser.set_defaults(rg_args=[])
    parser.add_argument('action', choices=['rename', 'replace'])
    parser.add_argument('-e', '--expression')
    parser.add_argument('--preview', action='store_true')
    parser.add_argument('-P', '--pcre2', dest='rg_args', const='--pcre2', action='append_const')
    parser.add_argument('-U', '--multiline', dest='rg_args', const='--multiline', action='append_const')
    parser.add_argument('files', nargs='*')
    args = parser.parse_intermixed_args()

    if args.preview:
        regex, replacement, glob = re.fullmatch(PATTERN_REGEX, args.expression or '').groups()

        if args.action == 'replace' and regex:
            command = rg_command(regex, replacement, glob, '--color=always', '--line-number', '--sort=path', *args.rg_args, '--', *args.files)
            os.execvp(command[0], command)

        elif args.action == 'rename':
            command = rg_command(None, None, glob, '--files', '--sort=path', *args.rg_args, '--', *args.files)
            if not regex:
                filter = ['sed', 's/^/\x1b[37m/; s/$/\x1b[0m/'] # grey them out
            else:
                filter = rg_command(regex, replacement, None, '--color=always', *args.rg_args)

            with subprocess.Popen(command, stdout=subprocess.PIPE) as proc:
                subprocess.run(filter, stdin=proc.stdout)

        return

    if args.expression is None:
        header = f'\nUsage: {SEP}regex{SEP}replacement{SEP}filename_glob'
        preview = shell_quote(sys.executable, sys.argv[0], args.action) + ' --preview --expression=s/{q} -- ' + shell_quote(*args.files)
        command = [
            'fzf',
            '--phony',
            '--info=hidden',
            '--preview-window=bottom:99%:wrap',
            '--layout=reverse',
            '--prompt=> s'+SEP,
            '--print-query',
            '--pointer= ', '--color=bg+:-1',
            '--header='+header,
            '--preview=2> >(sed "s/.*/\x1b[2;37m&\x1b[0m/") '+preview,
        ]
        args.expression = 's' + SEP + subprocess.run(command, input='\n', stdout=subprocess.PIPE, text=True).stdout.rstrip('\n')

    regex, replacement, glob = re.fullmatch(PATTERN_REGEX, args.expression).groups()
    if not regex or replacement is None:
        return
    print(shell_quote(parser.prog, args.action, '-e', args.expression), file=sys.stderr)

    if args.action == 'replace':
        command = rg_command(regex, replacement, glob, '--passthru', *args.rg_args)
        paths = subprocess.run(command+['-l', '--'] + args.files, stdin=subprocess.DEVNULL, capture_output=True, text=True).stdout.splitlines()
        if not paths:
            return
        print(file=sys.stderr)
        if not paths:
            return

        diff_filter = None
        while True:
            if diff_filter is None:
                for path in paths:
                    print('Modifying', path, file=sys.stderr)
            else:
                script = f'''
                while read -d "" file; do
                    echo
                    diff --unified=0 -- "$file" <({shell_quote(*command)} -- "$file")
                done {diff_filter}
                '''
                subprocess.run(script, input='\0'.join(paths)+'\0', text=True, shell=True)
                print('\x1b[0m', end='', file=sys.stderr)

            response = input('\nAre you sure (y/n/diff)? ').lower().strip()
            if response in ('d', 'diff'):
                diff_filter = subprocess.run(['git', 'config', '--get', 'interactive.diffFilter'], text=True, capture_output=True).stdout
                diff_filter = ' | '+diff_filter.rstrip('\n') if diff_filter else ''
            elif response in ('y', 'yes'):
                for path in paths:
                    content = subprocess.check_output(command + ['--', path])
                    with open(path, 'wb') as file:
                        file.write(content)
                break
            else:
                return 130

    elif args.action == 'rename':
        command = rg_command(None, None, glob, '--files', *args.rg_args, '--', *args.files)
        old_paths = subprocess.run(command, capture_output=True, text=True).stdout.splitlines()

        command = rg_command(regex, replacement, None, '--passthru', *args.rg_args)
        new_paths = subprocess.run(command, capture_output=True, text=True, input='\n'.join(old_paths)).stdout.splitlines()

        paths = [(old, new) for old, new in zip(old_paths, new_paths) if old != new]
        if not paths:
            return
        print(file=sys.stderr)
        for old, new in paths:
            print('Renaming', repr(old), '\t->\t', repr(new), file=sys.stderr)
            if os.path.exists(new):
                raise FileExistsError(new)

        if input('\nAre you sure (y/n)? ').lower().strip() not in ('y', 'yes'):
            return 130
        for old, new in paths:
            os.makedirs(os.path.dirname(new) or '.', exist_ok=True)
            if os.path.exists(new):
                raise FileExistsError(new)
            os.rename(old, new)

if __name__ == '__main__':
    try:
        sys.exit(main())
    except (KeyboardInterrupt, BrokenPipeError, EOFError):
        pass
